#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : SET_UAC
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1259645803b4971b
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     internal_properties : CAAAAAgAAAC7/aL5CRYmxs+cj0ok74BJo/18zEiNE/vfEjOAWAWvP8FsbljDYFE9OPNzhAgm7b73GupgoHTKbLaVALVICPYMRTlMs83k4ECcBjqU/oqwwqOR0OuCo+7veCBlfH8ZrxwtPT/J6isaItTmB1w=
     code : |1-
      // Structure used by the ShellExecuteEx API
      SHELLEXECUTEINFO is Structure
      	cbSize			is 4-byte int
      	fMask			is 4-byte int
      	hwnd			is system int
      	lpVerb			is system int
      	lpFile			is system int
      	lpParameters	is system int
      	lpDirectory		is system int
      	nShow			is 4-byte int
      	hInstApp		is system int
      	lpIDList		is system int
      	lpClass			is system int
      	hkeyClass		is system int
      	dwHotKey		is 4-byte int
      	hIcon_hMonitor	is system int
      	hProcess		is system int
      end
      
      constant
      	// Constants for configuring the SHELLEXECUTEINFO structure
      	SEE_MASK_DEFAULT		= (0x00000000)			// Use the default values
      	SEE_MASK_CLASSNAME		= (0x00000001)			// Use the value of nLpClass member
      	SEE_MASK_CLASSKEY		= (0x00000003)			// Use the value of nHkeyClass member (has priority over SEE_MASK_CLASSNAME)
      	SEE_MASK_IDLIST			= (0x00000004)			// Use the value of nLpIDList member (must point to a structure of ITEMLIST type)
      	SEE_MASK_HOTKEY			= (0x00000020)			// Use the keyboard shortcut of nDwHotKey member
      	SEE_MASK_NOCLOSEPROCESS	= (0x00000040)			// The nHProcess member will receive the handle of the process run, this one will have to be closed by a call to CloseHandle
      	SEE_MASK_NOASYNC		= (0x00000100)			// Waits the the execution to be started to give control back
      	SEE_MASK_DOENVSUBST		= (0x00000200)			// Extend the environment variables of nLpDirectory or nLpFile
      	SEE_MASK_FLAG_NO_UI		= (0x00000400)			// Don't display a message if an error occurs
      	SEE_MASK_NO_CONSOLE		= (0x00008000)			// The created process will inherit from the console of its caller
      	SEE_MASK_HMONITOR		= (0x00200000)			// Used to specify the screen that will be used on a multi-screen system (in the nHIcon_hMonitor member)
      	SEE_MASK_FLAG_LOG_USAGE	= (0x04000000)			// Counts the number of application launches (from XP, the most frequently used applications are position at the top of Start menu) 
      	
      	// Constants for the display mode of windows
      	SW_HIDE					= 0						// Hides the window
      	SW_SHOWMAXIMIZED		= 3						// Displays the maximized window
      	SW_SHOWMINIMIZED		= 2						// Displays the minimized window
      	SW_SHOWNOACTIVATE		= 4						// Don't activate the window
      	SW_SHOWNORMAL			= 1						// Displays the window
      	
      end
     type : 720896
  procedures :
   -
     name : UACAvailable
     internal_properties : CAAAAAgAAADCMmt3t8EV6ywP3DITmIdcsbRvkQSj5iUq2nh0nxnWu0TETJBN+MCwaC7pglpBy43Wj3X8Vcu1HN0QAiF0qvrg25dYdWQxxTUYl8lJDyuvC3y/nA5OwUrZUX5J0U6fOyJAl7gENaiIQ0tW1OOCuPPe9VPfSsBFJMuGcxIEm2fZDOvF9WcAoc470/g6njN7BuJ+CqsqxW1Da2KBxx8kazsVCwgw5Dyl
     procedure_id : 1322198294792083227
     type_code : 15
     code : |1-
      // Summary: Defines whether the UAC exists on the current operating system
      // Return value:
      // 	boolean: True if the UAC exists, False otherwise
      //
      procedure UACAvailable() : boolean
      
      // The UAC exists in Windows only, on the NT platforms
      if SysWindowsVersion(sysVersionPlatform) <> "NT" then return False
      
      // The UAC exists from Windows Vista
      if Val(SysWindowsVersion(sysVersionNumber)) < 6 then return False
      
      // The system supports the UAC
      return True
     type : 458752
   -
     name : UACActive
     procedure_id : 1322198294792148763
     type_code : 15
     code : |1-
      // Summary: Defines whether the UAC mechanism is enabled
      // Return value:
      // 	boolean: True if the UAC is enabled, False otherwise
      //
      procedure UACActive() : boolean
      
      // The UAC setting is stored in a registry key
      bUACEnable is boolean = UACAvailable _and_ ( Val(RegistryQueryValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System", "EnableLUA")) = 1 )
      
      return bUACEnable
     type : 458752
   -
     name : ExeHighPrivileges
     internal_properties : CAAAAAgAAAASUMb1vsQLXcRgV8R9eVkqBzJC9BSa6sOnR88c8PxkQmntefLIQL9WFRVRbQlaRA/ZveYUebWk3ZcuIUzz/eT2KFT+le9zG/lhUYCVSIbHrI7s0DhbpngXOZcEp3CAtNLjwe8pc4jyg7T+ayuZ3Yy+eS2zvCP+JMjCCevaRQLu9DK+zq/Fi2DFlxkr145bVSsNfhx5dx3T9vW4zYUrWevqVKlkOrO6VnWiGi6btdbAo8l9P8K0kaZMY2UHWnIG1JoaP8h0tAJM04i6+G65tw5YHA/gwOJLVZrUVVUgV4QvAY7D4Ot4W9XrTpl8Er0sd4sBzpgP6HQVGA==
     procedure_id : 1322198294792214299
     type_code : 15
     code : |1-
      // Summary: Defines whether the application was created with elevated privileges or not
      // Return value:
      // 	boolean: True if the application has elevated privileges, False otherwise
      //	In case of error, ErrorOccurred returns True and ErrorInfo returns the error details
      //
      procedure ExeHighPrivileges() : boolean
      
      TOKEN_READ					is 4-byte int	= 0x0008 + 0x00020000
      TokenElevation				is 4-byte int	= 20
      TokenElevationType			is 4-byte int	= 18
      TokenElevationTypeDefault	is 4-byte int	= 1
      TokenElevationTypeFull		is 4-byte int	= 2
      
      
      hProcess					is system int
      hToken						is system int
      tTokenElevation				is 4-byte int
      eElevationType				is 4-byte int
      dwTokenLength				is 4-byte int
      
      // Reads the security token of current process
      hProcess = API("kernel32", "GetCurrentProcess")
      if API("advapi32", "OpenProcessToken", hProcess, TOKEN_READ, &hToken) = False then
      	ErrorThrow(1, "Unable to read process security details.")
      	return False
      end
      
      // Asks for the elevation parameter found in the token
      if API("advapi32", "GetTokenInformation", hToken, TokenElevation, &tTokenElevation, Dimension(tTokenElevation), &dwTokenLength) = False then
      	ErrorThrow(2, "Unable to read the parameter for the elevation of privileges of the process.")
      	return False
      end
      
      if tTokenElevation <> 0 then
      	if API("advapi32", "GetTokenInformation", hToken, TokenElevationType, &eElevationType, Dimension(eElevationType), &dwTokenLength)=False then
      		ErrorThrow(3, "Unable to read the parameter value for the elevation of privileges of the process.")
      		return False
      	else
      		if eElevationType _in_ ( TokenElevationTypeDefault, TokenElevationTypeFull ) then
      			return True
      		else
      			return False
      		end
      	end
      end
      
      return False
     type : 458752
   -
     name : UserIsAdministrator
     internal_properties : CAAAAAgAAACU75AjK3J28UgIV1HWhOse+caeepaxDZYK3ORBMdoqi3yZO1qZhNDpAloWDdaiFWrIcDRlNkIBw6QwQT58KGyRAzTqAsSeExJqYv62QMn6YQLfxaH5ArfUUD3Y0neQAqunbg2fQEUJQnRHxeaPb5J/6L5EJeN0f6Sv5LOP9ASkmRnrE2ESrRQB75x+htvfWn68U7m0b2Q=
     procedure_id : 1322198294792279835
     type_code : 15
     code : |1-
      // Summary: Defines whether the current user is a member of the Administrator group
      // Return value:
      // 	boolean: True if the user belongs to the local "Administrators" group, False otherwise
      //
      procedure UserIsAdministrator() : boolean
      
      bAdmin is boolean = API("shell32", "IsUserAnAdmin")
      
      return bAdmin
     type : 458752
   -
     name : RunAppWithElevation
     internal_properties : CAAAAAgAAAAWYRJk3mrS2Wgo5/mGhOuOEaY2Sp6RVbYytLxB2SKiAwxBy3KZ3KBBMgom5XYyZVowQNwlzmK504wYKd6kMESZQ7z6ymQW4xoKku4CLMXunV5TOXXdppOgfFEc3nOc5kfDcoHTFKmVTkBbiZJ7m9b75FLYiXe4m0A7uKd7cLAYBZVfhyWWYYBdC2AC8tfbjs58IDsy7eY=
     procedure_id : 1322198294792345371
     type_code : 15
     code : |1-
      // Summary: Starts an application by elevating the privileges
      // Parameters:
      //	sCommandLine (UNICODE string): Command line to run
      //	sParameters (UNICODE string): Mode for running the program
      //	nMode (integer - default value=1): indicates whether we must wait for the end of process before giving control back
      //	nWaitForEnd (integer - default value=1): working directory (empty string = current directory)
      //	sWorkingDirectory (UNICODE string - default value=""): Start directory
      // Return value:
      // 	boolean: True if the application was properly started, False if an error occurred
      //
      procedure RunAppWithElevation(local sCommandLine is string, local sParameters is string, local nMode is int = exeActive, local nWaitForEnd is int = exeWait, local sWorkingDirectory is string = "") : boolean
      
      return _RunAppUAC(sCommandLine, sParameters, nWaitForEnd, nMode, sWorkingDirectory, "runas")
     type : 458752
   -
     name : RunAppUAC
     procedure_id : 1322198294792410907
     type_code : 15
     code : |1-
      // Summary: Starts an application by elevating the privileges
      // Parameters:
      //	sCommandLine (ANSI string): Command line to run
      //	sParameters (ANSI string): Mode for running the program
      //	nMode (integer - default value=1): indicates whether we must wait for the end of process before giving control back
      //	nWaitForEnd (integer - default value=1): working directory (empty string = current directory)
      //	sWorkingDirectory (ANSI string - default value=""): Start directory
      // Return value:
      // 	boolean: True if the application was properly started, False if an error occurred
      //
      procedure RunAppUAC(local sCommandLine is string, local sParameters is string, local nMode is int = exeActive, local nWaitForEnd is int = exeWait, local sWorkingDirectory is string = "") : boolean
      
      return _RunAppUAC(sCommandLine, sParameters, nWaitForEnd, nMode, sWorkingDirectory, "open")
     type : 458752
   -
     name : RunAppRestrictedPrivileges
     internal_properties : CAAAAAgAAAAG3NTJDaT4Bxkuq8BkGgsAE19+htZ0qeASF0twc/cJBYT/jVJYb0oUA3hU0J0SpMr62OTsxWP43Zy9uOj8wsMGQVNzLP9LEWiju8sBrebjxPPy01fDl4xiSO3vzIUe9h6thXUbEDUBCbqwLsrqU66AiFm2vz0S8VnnoVCJT9qgIoXx/v/4qpofbiOWjSixSSn4NqCXArGNZHCGnMlrcQugQ2vkwKGBeu0Pej9Aj1Hb/tRKkewmd40xoFrHr/yL8Q==
     procedure_id : 1322198294792476443
     type_code : 15
     code : |1-
      // Summary: Starts an application by restoring restricted privileges
      // To restore restricted privileges, the application must be started by the task scheduler.
      // From Windows Vista, the scheduled tasks include an additional option to indicate
      // whether the application must be started in elevated or restricted privileges
      // This option is not available in the ScheduledTask structure of WLanguage.
      // To solve this problem, the scheduled task is created by using the schtasks.exe utility (supplied with Windows)
      // that is used to emulate the task scheduler.
      // Parameters:
      //	sAppName (ANSI string): Command line to run
      // Return value:
      // 	boolean: True if the application was properly started, False if an error occurred
      //
      procedure RunAppRestrictedPrivileges(local sAppName is string) : boolean
      
      sXMLContent is string = [
      	<?xml version="1.0" ?>
      	<Task xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
      		<RegistrationInfo>
      			<Date>2005-10-11T13:21:17-08:00</Date>
      			<Author></Author>
      			<Version>1.0.0</Version>
      			<Description></Description>
      		</RegistrationInfo>
      		<Triggers>
      			<TimeTrigger>
      				<StartBoundary>2005-10-11T13:21:17-08:00</StartBoundary>
      				<EndBoundary>2006-01-01T00:00:00-08:00</EndBoundary>
      				<Enabled>true</Enabled>
      				<ExecutionTimeLimit>PT5M</ExecutionTimeLimit>
      			</TimeTrigger>
      		</Triggers>
      		<Principals>
      			<Principal>
      				<LogonType>InteractiveToken</LogonType>
      			</Principal>
      		</Principals>
      		<Settings>
      			<Enabled>true</Enabled>
      			<AllowStartOnDemand>true</AllowStartOnDemand>
      			<AllowHardTerminate>true</AllowHardTerminate>
      		</Settings>
      		<Actions>
      			<Exec>
      				<Command>[%sAppName%]</Command>
      			</Exec>
      		</Actions>
      	</Task>
      ]
      
      
      sTaskName	is string	= "RunApp"+GetGUID()
      
      sTempFile	is string	= fTempFile("XML")
      fSaveText(sTempFile,sXMLContent)
      
      // Create the task
      sCommandLine is string = "schtasks.exe /create /XML ""[sTempFile%]"" /tn [sTaskName%]"
      if ExeRun(sCommandLine, exeIconize, exeWait) = False then
      	return False
      end
      
      // Deletes the description file
      fDelete(sTempFile)
      
      // Forced execution
      sCommandLine = "schtasks.exe /run /tn [%sTaskName%]"
      if ExeRun(sCommandLine, exeIconize, exeWait)=False then
      	return False
      end
      
      // Erase the task
      sCommandLine = "schtasks.exe /delete /f /tn [%sTaskName%]"
      
      return ExeRun(sCommandLine,exeIconize,exeWait)
     type : 458752
   -
     name : _RunAppUAC
     internal_properties : CAAAAAgAAAC9RR5IIHP+iyUAXcvm5/MXyXrmyBMAMv9IB1GTYb6R228EBKYdzbfavg2wO9PmkUnWuh1B4ClpvfbU6lA/XaE1/DwX8+ZLKcpZmOPmUoBvPeU4MjDCitYOu2IGYsi7MW5RL38wIB9WhKGO+b3ZN/saNF8/7WmOwGJMD3G+IBAhyH7tBQNSIr8q7UUlrGuZpGprQ+I70E9cSexFuGsr/iuEh/70W1kLK4lDNFTdtFLC5KkA9nTEE9Q4rnPrbhFWVY14gbWUuZPWiHCuug==
     procedure_id : 1322198294792541979
     type_code : 15
     code : |1-
      // Summary: Internal function used by RunAppUAC and RunAppWithElevation
      //
      procedure private _RunAppUAC(local sCommandLine is string, local sParameters is string, local nWaitForEnd is int, local nMode is int, local sWorkingDirectory is string, local sVerb is string)
      
      // Initializes the structure of ShellExecuteEx API
      stRunApp is SHELLEXECUTEINFO
      stRunApp.cbSize			= Dimension(stRunApp)
      
      stRunApp.lpFile			= &sCommandLine
      stRunApp.lpParameters	= &sParameters
      stRunApp.lpVerb			= &sVerb
      stRunApp.fMask			= SEE_MASK_DEFAULT
      
      // Process the locking launch parameter
      if nWaitForEnd = exeWait then
      	stRunApp.fMask = SEE_MASK_NOCLOSEPROCESS
      end
      
      // Process the launch mode
      switch nMode
      	case exeActive
      		stRunApp.nShow = SW_SHOWNORMAL
      	case exeIconize
      		stRunApp.nShow = SW_SHOWMINIMIZED
      	case exeInactive
      		stRunApp.nShow = SW_SHOWNORMAL + SW_SHOWNOACTIVATE
      	case exeMaximize
      		stRunApp.nShow = SW_SHOWMAXIMIZED
      end
      if sWorkingDirectory <> "" then
      	stRunApp.lpDirectory = &sWorkingDirectory
      end
      
      // Call the API
      <compile if ConfigurationUNICODE>
      	bRet is boolean = API("shell32", "ShellExecuteExW", &stLanceAppli)
      <else>	
      	bRet is boolean = API("shell32", "ShellExecuteExA", &stRunApp)
      <end>
      
      if bRet _and_ nMode = exeActive then
      	
      	// If we have to wait for the end of exe
      	if stRunApp.hProcess <> 0 then
      		
      		nExitCode is 4-byte int
      		while API("kernel32", "GetExitCodeProcess", stRunApp.hProcess, &nExitCode)
      			if nExitCode <> 259 then break
      			Multitask(-100)
      		end
      	end
      end
      
      return bRet
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x10d9977d0368cb73
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
